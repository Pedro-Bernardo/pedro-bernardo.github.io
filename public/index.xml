<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pedro Bernardo</title>
    <link>//localhost:1313/</link>
    <description>Recent content on Pedro Bernardo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Apr 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>hfs_browser -- Midnight Sun CTF 2022 Quals</title>
      <link>//localhost:1313/blog/posts/2022-04-03-midnightquals22_hfs_browser/</link>
      <pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2022-04-03-midnightquals22_hfs_browser/</guid>
      <description>Solved with @jorge and @s3np41k1r1t0 ar Points: dynamic&#xA;Solves: 20&#xA;TL;DR Find a UAF in the midnight() method for JS typed arrays Exploit the UAF to get a libc leak Exploit the UAF to perform a tcache poison attack Set __free_hook to system Free a chunk containing cat *la* Win The Problem We are given a tar file containing the following:&#xA;hfs_browser - the binary libc-2.31.so, libcurl-gnutls.so.4.6.0&amp;quot; - libraries used remotely readme.</description>
    </item>
    <item>
      <title>Heap Basics Lecture - 2022</title>
      <link>//localhost:1313/blog/posts/2022-01-19-heap_basics_2nd_edition/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2022-01-19-heap_basics_2nd_edition/</guid>
      <description>The second rendition of the Glibc&amp;rsquo;s Heap Basics and How to Exploit it* lecture.&#xA;We covered the following topics:&#xA;Chunks and chunk implementation Coalescing Main arena and Bins Tcache Common attacks Exploit development walkthrough Demo We solved gradebook from the K3RN3L CTF 2021 via a Tcache Poison attack (unintended solution). This solution walks through obtaining libc leaks and how to forge heap layouts favorable for using the Tcache Poison technique to obtain code execution.</description>
    </item>
    <item>
      <title>ncore -- CSAW Quals 2021</title>
      <link>//localhost:1313/blog/posts/2021-09-13-csawquals21_ncore/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2021-09-13-csawquals21_ncore/</guid>
      <description>Points: 484 (dynamic)&#xA;Solves: 53&#xA;Description:&#xA;We have a very safe core with a very safe enclave&#xA;Problem: Server We are given a server.py file that is running on the server that reads user input and stores it in a ram.hex file. The server then uses vvp (Icarus Verilog vvp runtime engine) to run a compiled SystemVerilog file called nco.&#xA;For debugging, you can install the iverilog compiler, which compiles SystemVerilog source files to vvp assembly, which can then be executed by vvp.</description>
    </item>
    <item>
      <title>Dark Honya -- nullcon HackIM 2020</title>
      <link>//localhost:1313/blog/posts/2020-02-15-nullcon20_dark_honya/</link>
      <pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2020-02-15-nullcon20_dark_honya/</guid>
      <description>With Jorge and jofra&#xA;Points: 460 (dynamic)&#xA;TL;DR Null byte overflow on heap chunk Free overflown chunk Overwrite ptr array Write printf@plt on free@got to obtain a libc leak Write system on atoi@got to get a shell Binary Mitigations Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) Reversing The program provided three functionalities:&#xA;1. Buy a book void buy() { char *chunk; signed int i; for ( i = 0; ptr[i]; ++i ) ; if ( i &amp;lt;= 15 ) { chunk = malloc(0xF8); puts(&amp;#34;Name of the book?</description>
    </item>
    <item>
      <title>Heap Exploitation Lecture</title>
      <link>//localhost:1313/blog/posts/2019-12-03-heap_exploitation_lecture/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2019-12-03-heap_exploitation_lecture/</guid>
      <description>Lecture with Jorge on Glibc&amp;rsquo;s Heap basics and how to exploit it.&#xA;We covered the following topics:&#xA;Chunks and chunk implementation Coalescing Main arena and Bins Tcache Common attacks The lecture slides can be downloaded here</description>
    </item>
    <item>
      <title>Software Security - Taint Analysis</title>
      <link>//localhost:1313/blog/posts/2019-11-29-software_security_coursework/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2019-11-29-software_security_coursework/</guid>
      <description>Tools: Python&#xA;source code&#xA;This tool analyses python code slices and reports on illegal information flows by performing Taint Analysis, a form of Static Analysis. It was developed as a Software Security course project by me and Tchiclas&#xA;The following code slice contains lines of code which may impact a data flow between a certain entry point and a sensitive sink. The variable request (which for intuition can be seen as the request parameter of a Django view), is uninstantiated, and can be understood as an entry point.</description>
    </item>
    <item>
      <title>Random Vault -- Pwn2Win 2019 CTF</title>
      <link>//localhost:1313/blog/posts/2019-11-10-pwn2win19_random_vault/</link>
      <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2019-11-10-pwn2win19_random_vault/</guid>
      <description>With Jorge&#xA;Points: 303 (dynamic) Solves: 18&#xA;TL;DR Only two Format String vulnerability allowed. Use first Format String to bypass PIE mitigation Use second Format String to: change srand() seed value change function pointer Built shellcode and get shell Reversing Binary Mitigations Arch: amd64-64-little RELRO: FULL RELRO STACK: Canary Found NX: NX enabled PIE: PIE enabled The binary functionality is pretty simple:&#xA;1. Change username Let&amp;rsquo;s you change the username once, will lead to printf(username).</description>
    </item>
    <item>
      <title>lazy -- SECCON 2019 Online CTF</title>
      <link>//localhost:1313/blog/posts/2019-10-20-seccon19_lazy/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2019-10-20-seccon19_lazy/</guid>
      <description>Points: 332 (dynamic) Solves: 43&#xA;TLDR Overflow to bypass login Exfiltrate all relevant files (challenge binary and libc) Format string to change the name of the file to be downloaded Format String to get leaks Buffer Overflow to build a ROP-chain and get a shell Recon and Reversing: In this challenge we are simply given the server host:port combination: lazy.chal.seccon.jp 33333&#xA;Connecting to it with netcat, we get a menu with 3 options:</description>
    </item>
    <item>
      <title>SPlaid Birch -- Plaid CTF 2019</title>
      <link>//localhost:1313/blog/posts/2019-4-19-plaidctf19_splaid_birch/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2019-4-19-plaidctf19_splaid_birch/</guid>
      <description>With jofra&#xA;Points: 300 Solves: 41 Description:&#xA;I make sure never to use&#xA;scanf(&amp;quot;%s&amp;quot;)&#xA;when doing competitive programming so that my solutions don&amp;rsquo;t have buffer overflows. But writing algorithms is hard.&#xA;Recon We are given an ELF 64-bit x86/64 stripped binary, a libc and an external library lisplaid.so.1. After reversing this library a bit, we realized that it is an implementation of Splay Trees.&#xA;From wikipedia:&#xA;A splay tree is a self-balancing binary search tree with the additional property that recently accessed elements are quick to access again.</description>
    </item>
    <item>
      <title>Artificial Intelligence Course Project</title>
      <link>//localhost:1313/blog/posts/2018-12-23-artificial_inteligence_coursework/</link>
      <pubDate>Sun, 23 Dec 2018 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2018-12-23-artificial_inteligence_coursework/</guid>
      <description> Grade: 19/20&#xA;Tools: Python&#xA;Agent for solving Solitaire Puzzle Game given a board state Bayesian Network Module and Reinforcement Learning (Q-learning) implementation </description>
    </item>
    <item>
      <title>Computer Networks</title>
      <link>//localhost:1313/blog/posts/2018-12-10-computer_networks/</link>
      <pubDate>Sun, 23 Dec 2018 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2018-12-10-computer_networks/</guid>
      <description>Grade: 17/20&#xA;Tools: C++ source code&#xA;File Backup Application, with Client App, Control Server and Backup Server programs.</description>
    </item>
    <item>
      <title>Databases</title>
      <link>//localhost:1313/blog/posts/2018-11-17-databases/</link>
      <pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2018-11-17-databases/</guid>
      <description> Grade: 17.2/20&#xA;Tools: HTML, CSS, PHP, PostgreSQL&#xA;source code&#xA;Demo:&#xA;Forest Fire Control Management System </description>
    </item>
    <item>
      <title>Computer Graphics</title>
      <link>//localhost:1313/blog/posts/2018-11-08-computer_graphics/</link>
      <pubDate>Thu, 08 Nov 2018 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2018-11-08-computer_graphics/</guid>
      <description> Grade: 19.9/20&#xA;Tools: HTML5, Javascript, Three.js&#xA;A series of computer graphics demos written in Three.js.&#xA;Interactive Animation and basic 3D Object Modulation iPerspective Cameras, Autonomous Movement and Collision Detection Materials and different Light Sources Textures, Point Light, Pause and Restart </description>
    </item>
    <item>
      <title>shell-&gt;code -- CSAW2018 Quals</title>
      <link>//localhost:1313/blog/posts/2018-09-20-csaw18_shell-%5Ccode/</link>
      <pubDate>Thu, 20 Sep 2018 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2018-09-20-csaw18_shell-%5Ccode/</guid>
      <description>Points: 100&#xA;Solves: 261&#xA;Description:&#xA;Linked lists are great! They let you chain pieces of data together.&#xA;nc pwn.chal.csaw.io 9005&#xA;flag format: flag{...}&#xA;Given:&#xA;shellpointcode&#xA;Introduction shell-&amp;gt;code was a 100 points pwn challenge on the CSAW’18 CTF Qualification Round&#xA;Reversing (The Problem) The clue was: &amp;ldquo;Linked lists are great! They let you chain pieces of data together&amp;rdquo;&#xA;Running checksec on the binary gives the following result:&#xA;This gives us a few clues already:</description>
    </item>
    <item>
      <title>Human Computer Interaction</title>
      <link>//localhost:1313/blog/posts/2018-05-25-human_computer_interaction/</link>
      <pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blog/posts/2018-05-25-human_computer_interaction/</guid>
      <description> Grade: 18.93/20&#xA;Tools: HTML5, CSS, Javascript&#xA;Smartwatch interface prototype for a music festival accessory.&#xA;Group webpage iRave Final Verison </description>
    </item>
  </channel>
</rss>
